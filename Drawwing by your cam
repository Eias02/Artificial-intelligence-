# dont forget to install 

import cv2
import numpy as np
import mediapipe as mp

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(max_num_hands=2)  # Set maximum number of hands to track
mp_drawing = mp.solutions.drawing_utils

# Initialize webcam
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("Error: Unable to open camera.")
    exit()

canvas = None
prev_points = {'right': (None, None), 'left': (None, None)}

while True:
    ret, frame = cap.read()
    if not ret:
        print("Error: Unable to capture frame.")
        break

    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    result = hands.process(rgb_frame)

    if canvas is None:
        canvas = np.zeros_like(frame)

    if result.multi_hand_landmarks:
        for hand_idx, hand_landmarks in enumerate(result.multi_hand_landmarks):
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
            # Determine if this is the right or left hand
            hand_label = "right" if result.multi_handedness[hand_idx].classification[0].label == "Right" else "left"
            for id, lm in enumerate(hand_landmarks.landmark):
                h, w, c = frame.shape
                cx, cy = int(lm.x * w), int(lm.y * h)
                if id == 8:  # Index finger tip for drawing
                    if prev_points[hand_label] == (None, None):
                        prev_points[hand_label] = (cx, cy)
                    else:
                        cv2.line(canvas, prev_points[hand_label], (cx, cy), (255, 0, 0), 4)
                        prev_points[hand_label] = (cx, cy)

    # Combine canvas and frame
    frame = cv2.addWeighted(frame, 0.5, canvas, 0.5, 0)

    cv2.imshow("Air Canvas", frame)

    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        break
    elif key == ord('c'):  # Clear the canvas when 'c' is pressed
        canvas = np.zeros_like(frame)

cap.release()
cv2.destroyAllWindows()
hands.close()
